@page "/game"
@using Welp.ServerData;
@using Newtonsoft.Json;
@using Welp.ServerLogic;
@using BlazorStrap;
@using BlafettisLib;

<PageTitle>A Game Of Welps</PageTitle>

<BSToaster></BSToaster>

<div class="row">
    <div class="col">
        
        <img class="game-board" src="images/game-board-big.png" alt="..." />
        <div>
            <div class="room x-2 y2">
                <BSRow Justify="Justify.Center">

                    @foreach (var player in State.Players.Where(p => p.Position == (-2, 2)))
                    {
                         <img class="piece-img" src="@(GetPiece(player))" />
                    }
                </BSRow>
            </div>
            <div class="room x-1 y2">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (-1, 2)))
                    {
                        <img class="piece-img" src="@(GetPiece(player))" />       
                    }
                </BSRow>
            </div>
            <div class="room x0 y2">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (0, 2)))
                    {
                        <img class="piece-img" src="@(GetPiece(player))" />                         
                    }
                </BSRow>
            </div>
            <div class="room x1 y2">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (1, 2)))
                    {                             
                        <img class="piece-img" src="@(GetPiece(player))" />
                    }
                </BSRow>
            </div>
            <div class="room x2 y2">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (2, 2)))
                    {
                         <img class="piece-img" src="@(GetPiece(player))" />
                    }
                </BSRow>
            </div>
        </div>

        <div>
            <div class="room x-2 y1">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (-2, 1)))
                    {
                         <img class="piece-img" src="@(GetPiece(player))" />
                    }
                </BSRow>
            </div>
            <div class="room x-1 y1">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (-1, 1)))
                    {
                         <img class="piece-img" src="@(GetPiece(player))" />
                    }
                </BSRow>
            </div>
            <div class="room x0 y1">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (0, 1)))
                    {
                        <img class="piece-img" src="@(GetPiece(player))" />
                    }
                </BSRow>
            </div>
            <div class="room x1 y1">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (1, 1)))
                    {
                            <img class="piece-img" src="@(GetPiece(player))" />
                    }
                </BSRow>
            </div>
            <div class="room x2 y1">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (2, 1)))
                    {
                            <img class="piece-img" src="@(GetPiece(player))" />
                    }
                </BSRow>
            </div>
        </div>

        <div>
            <div class="room x-2 y0">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (-2, 0)))
                    {
                            <img class="piece-img" src="@(GetPiece(player))" />
                    }
                </BSRow>
            </div>
            <div class="room x-1 y0">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (-1, 0)))
                    {
                            <img class="piece-img" src="@(GetPiece(player))" />
                    }
                </BSRow>
            </div>
            <div class="room x0 y0">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (0, 0)))
                    {
                            <img class="piece-img" src="@(GetPiece(player))" />
                    }
                </BSRow>
            </div>
            <div class="room x1 y0">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (1, 0)))
                    {
                            <img class="piece-img" src="@(GetPiece(player))" />
                    }
                </BSRow>
            </div>
            <div class="room x2 y0">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (2, 0)))
                    {
                            <img class="piece-img" src="@(GetPiece(player))" />
                    }
                </BSRow>
            </div>
        </div>

        <div>
            <div class="room x-2 y-1">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (-2, -1)))
                    {
                             <img class="piece-img" src="@(GetPiece(player))" />
                    }
                </BSRow>
            </div>
            <div class="room x-1 y-1">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (-1, -1)))
                    {
                             <img class="piece-img" src="@(GetPiece(player))" />
                    }
                </BSRow>
            </div>
            <div class="room x0 y-1">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (0, -1)))
                    {
                             <img class="piece-img" src="@(GetPiece(player))" />
                    }
                </BSRow>
            </div>
            <div class="room x1 y-1">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (1, -1)))
                    {
                             <img class="piece-img" src="@(GetPiece(player))" />
                    }
                </BSRow>
            </div>
            <div class="room x2 y-1">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (2, -1)))
                    {
                             <img class="piece-img" src="@(GetPiece(player))" />
                    }
                </BSRow>
            </div>
        </div>

        <div>
            <div class="room x-2 y-2">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (-2, -2)))
                    {
                             <img class="piece-img" src="@(GetPiece(player))" />
                    }
                </BSRow>
            </div>
            <div class="room x-1 y-2">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (-1, -2)))
                    {
                            <img class="piece-img" src="@(GetPiece(player))" />
                    }
                </BSRow>
            </div>
            <div class="room x0 y-2">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (0, -2)))
                    {
                             <img class="piece-img" src="@(GetPiece(player))" />
                    }
                </BSRow>
            </div>
            <div class="room x1 y-2">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (1, -2)))
                    {
                             <img class="piece-img" src="@(GetPiece(player))" />
                    }
                </BSRow>
            </div>
            <div class="room x2 y-2">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (2, -2)))
                    {
                            <img class="piece-img" src="@(GetPiece(player))" />
                    }
                </BSRow>
            </div>
        </div>

    </div>
    <div class="col">
        <BSRow class="mb-5">
            <BSCol>
                <BSAccordion class="pt-5 pe-5">
                    @if (IAmScarlett)
                    {
                        <BSAccordionItem>
                            <Header>
                                <strong>
                                    Host Actions
                                </strong>
                            </Header>
                            <Content>
                                <BSRow Justify="Justify.Center">
                                    <p class="lead">
                                        You are the host, would you like to start/reset/terminate the game?
                                    </p>
                                    @if(State.Players.Count == 0 ){
                                        <button @onclick="RestartGame" type="button" class="btn btn-success massive-button"
                                        style="width: 300px">Start
                                    </button>
                                    }
                                    
                                    <button @onclick="RestartGame" type="button" class="btn btn-warning massive-button ms-2"
                                        style="width: 300px">Restart
                                    </button>
                                    <button @onclick="TerminateGame" type="button" class="btn btn-danger massive-button ms-2"
                                        style="width: 300px">Terminate
                                    </button>
                                    <BSButton Color="BSColor.Secondary" @onclick="Cktest"  IsOutlined="true" class="massive-button ms-2"
                                        style="width: 300px">cktest
                                    </BSButton>
                                    
                                </BSRow>
                            </Content>
                        </BSAccordionItem>
                    }
                    <BSAccordionItem DefaultShown="IsPlayerTurn">
                        <Header>
                            <strong>
                                Player Actions @(MyPlayer is null ? "" : "[You are " + MyPlayer + "]")
                            </strong>
                        </Header>
                        <Content>
                            @if (!IsPlayerTurn || CurrentOptions.EndTurn == null)
                            {
                                <BSRow Justify="Justify.Center">
                                    <p class="lead">
                                        Please wait for your turn.
                                    </p>
                                </BSRow>
                            }
                            else
                            {
                                <BSNav IsTabs="true">
                                    <BSNavItem>
                                        <TabLabel>Movement</TabLabel>
                                        <TabContent>
                                            @if(CanMove()){
                                                <p class="lead pt-3">
                                                    If you would like to move, make a selection and submit. For reference, the Billiards Room is at (0, 0).
                                                </p>
                                                @if(MovementIndex is null)
                                                {
                                                    <p>
                                                        Nothing Selected
                                                    </p>
                                                }                                               
                                                
                                                @foreach(var action in CurrentOptions?.Movement?.Select((m,i) => new {m,i}))
                                                {
                                                    
                                                    <div Class="@BS.Form_Check">                                                        
                                                        <BSLabel IsCheckLabel="true">
                                                            <BSInputRadio TValue="int?" CheckedValue="action.i" @bind-Value="MovementIndex" />
                                                            Move to (@action.m.Details.NewPosition.Item1, @action.m.Details.NewPosition.Item2)
                                                        </BSLabel>
                                                    </div> 
                                                }
                                                <BSRow Justify="Justify.Center">
                                                    <button @onclick="SubmitPlayerAction" disabled="@(MovementIndex is null ? true : false)" type="button"
                                                        class="btn btn-primary massive-button" style="width: 300px">
                                                        Send Movement
                                                    </button>               
                                                    <button @onclick="SubmitEndTurnAction" type="button" class="btn btn-warning massive-button ms-2" style="width: 300px">
                                                        End Turn
                                                    </button>                                 
                                                </BSRow>
                                            }else {
                                                <p class="lead pt-3">
                                                    Can't Move At This Time
                                                </p>
                                                <BSRow Justify="Justify.Center">
                                                    <button @onclick="SubmitEndTurnAction" type="button" class="btn btn-warning massive-button" style="width: 300px">
                                                        End Turn
                                                    </button>
                                                </BSRow>                                                   
                                            }

                                        </TabContent>    
                                    </BSNavItem>
                                    <BSNavItem>
                                        <TabLabel>Suggestion</TabLabel>
                                        <TabContent>
                                            @if(CanSuggest()) {
                                                <p class="lead pt-3">
                                                    If you would like to make a suggestion, make a selection and submit.
                                                </p>

                                                @if(SuggestionWeapon <0 || SuggestionCharacter < 0)
                                                {
                                                    <p>
                                                        Must Select Both a Weapon and Character
                                                    </p>
                                                    
                                                }

                                                <BSInput TValue="int" InputType="BlazorStrap.InputType.Select" @bind-Value="SuggestionWeapon" >                                            
                                                    <option value="-1">Select a Weapon</option>
                                                    <option value="0">@Weapon.Knife.ToString()</option>
                                                    <option value="1">@Weapon.CandleStick.ToString()</option>
                                                    <option value="2">@Weapon.Revolver.ToString()</option>
                                                    <option value="3">@Weapon.Rope.ToString()</option>
                                                    <option value="4">@Weapon.LeadPipe.ToString()</option>
                                                    <option value="5">@Weapon.Wrench.ToString()</option>
                                                </BSInput>
                                            
                                                <BSInput class="mt-3" TValue="int" InputType="BlazorStrap.InputType.Select" @bind-Value="SuggestionCharacter" >                                            
                                                    <option value="-1">Select a Character</option>
                                                    <option value="0">@Character.MissScarlet.ToString()</option>
                                                    <option value="1">@Character.ProfessorPlum.ToString()</option>
                                                    <option value="2">@Character.ColonelMustard.ToString()</option>
                                                    <option value="3">@Character.MrsPeacock.ToString()</option>
                                                    <option value="4">@Character.MrGreen.ToString()</option>
                                                    <option value="5">@Character.MrsWhite.ToString()</option>
                                                </BSInput>
                                                
                                                <BSRow Justify="Justify.Center">
                                                    <button @onclick="SubmitSuggestion" disabled="@(SuggestionWeapon <0 || SuggestionCharacter <0)" type="button"
                                                        class="btn btn-primary massive-button" style="width: 300px">
                                                        Submit Suggestion
                                                    </button>
                                                    <button @onclick="SubmitEndTurnAction" type="button" class="btn btn-warning massive-button  ms-2" style="width: 300px">
                                                        End Turn
                                                    </button>
                                                </BSRow>                                                
                                            } else {
                                                <p class="lead pt-3">
                                                    Must be in a room to make a suggestion
                                                </p>
                                                <BSRow Justify="Justify.Center">
                                                    <button @onclick="SubmitEndTurnAction" type="button" class="btn btn-warning massive-button" style="width: 300px">
                                                        End Turn
                                                    </button>
                                                </BSRow>   
                                            }

                                        </TabContent>
                                        </BSNavItem>
                                    <BSNavItem>
                                        <TabLabel>Accusation</TabLabel>
                                        <TabContent>
                                            <p class="lead pt-3">
                                                If you would like to make an accusation, make a selection and submit.
                                            </p>
                                            
                                            @if(AccusationWeapon <0  || AccusationCharacter <0 || AccusationRoomName <0)
                                            {
                                                <p>
                                                    Must Select a Weapon, Character, and Room
                                                </p>
                                                
                                            }
                                            
                                            <BSInput TValue="int" InputType="BlazorStrap.InputType.Select" @bind-Value="AccusationWeapon" >                                            
                                                <option value="-1">Select a Weapon</option>
                                                <option value="0">@Weapon.Knife.ToString()</option>
                                                <option value="1">@Weapon.CandleStick.ToString()</option>
                                                <option value="2">@Weapon.Revolver.ToString()</option>
                                                <option value="3">@Weapon.Rope.ToString()</option>
                                                <option value="4">@Weapon.LeadPipe.ToString()</option>
                                                <option value="5">@Weapon.Wrench.ToString()</option>
                                            </BSInput>
                                        
                                            <BSInput class="mt-3" TValue="int" InputType="BlazorStrap.InputType.Select" @bind-Value="AccusationCharacter" >                                            
                                                <option value="-1">Select a Character</option>
                                                <option value="0">@Character.MissScarlet.ToString()</option>
                                                <option value="1">@Character.ProfessorPlum.ToString()</option>
                                                <option value="2">@Character.ColonelMustard.ToString()</option>
                                                <option value="3">@Character.MrsPeacock.ToString()</option>
                                                <option value="4">@Character.MrGreen.ToString()</option>
                                                <option value="5">@Character.MrsWhite.ToString()</option>
                                            </BSInput>

                                            <BSInput class="mt-3" TValue="int" InputType="BlazorStrap.InputType.Select" @bind-Value="AccusationRoomName" >                                            
                                                <option value="-1">Select a Room</option>                                                
                                                <option value="0">@RoomName.Study.ToString()</option>
                                                <option value="1">@RoomName.Hall.ToString()</option>
                                                <option value="2">@RoomName.Lounge.ToString()</option>
                                                <option value="3">@RoomName.Library.ToString()</option>
                                                <option value="4">@RoomName.BilliardRoom.ToString()</option>
                                                <option value="5">@RoomName.DiningRoom.ToString()</option>
                                                <option value="6">@RoomName.Conservatory.ToString()</option>
                                                <option value="7">@RoomName.Ballroom.ToString()</option>
                                                <option value="8">@RoomName.Kitchen.ToString()</option>
                                                
                                            </BSInput>                                            
                                            
                                            <BSRow Justify="Justify.Center">
                                                <button @onclick="SubmitAccusation" type="button" disabled="@(AccusationWeapon <0 || AccusationCharacter <0 || AccusationRoomName <0)"
                                                    class="btn btn-primary massive-button" style="width: 300px">
                                                    Submit Accusation
                                                </button>
                                                <button @onclick="SubmitEndTurnAction" type="button" class="btn btn-warning massive-button  ms-2" style="width: 300px">
                                                    End Turn
                                                </button>
                                            </BSRow>
                                        </TabContent>
                                    </BSNavItem>
                                </BSNav>                      
                            }
                        </Content>
                    </BSAccordionItem>


                </BSAccordion>

            </BSCol>
        </BSRow>
        <BSRow>
            <BSCol>
                <BSAccordion class="pt-5 pe-5">
                    <BSAccordionItem>
                        <Header><strong>My Cards</strong></Header>
                        <Content>
                            @if (State.Players.FirstOrDefault(p => p.User.ConnectionId == ConnectionId)?.Cards != null)
                            {
                                <strong>Cards</strong>
                                <BSRow>
                                    @foreach (var card in State.Players.FirstOrDefault(p => p.User.ConnectionId == ConnectionId).Cards)
                                    {
                                        <BSCol>
                                            <BSImage id="card" Source=@card.GetCardImage() height=250 />
                                        </BSCol>   
                                    }
                                </BSRow>
                            }
                        </Content>
                    </BSAccordionItem>
                    <BSAccordionItem>
                        <Header><strong>Guess Sheet</strong></Header>
                        <Content>
                            <BSRow Justify="Justify.Center">
                                <div><strong>Suspects</strong></div>

                                @foreach (var (suspect, guesses) in Sheet.Suspects)
                                {
                                    <BSRow Justify="Justify.Center">
                                        <BSCol>@suspect</BSCol>
                                        @foreach (var bi in Enumerable.Range(0, guesses.Count))
                                        {
                                            <BSCol>
                                                <BSInputCheckbox TValue="bool" @bind-Value="Sheet.Suspects[suspect][bi]">
                                                </BSInputCheckbox>
                                            </BSCol>
                                        }
                                    </BSRow>
                                }
                            </BSRow>

                            <BSRow Justify="Justify.Center">
                                <div><strong>Rooms</strong></div>

                                @foreach (var (room, guesses) in Sheet.Rooms)
                                {
                                    <BSRow Justify="Justify.Center">
                                        <BSCol>@room</BSCol>
                                        @foreach (var bi in Enumerable.Range(0, guesses.Count))
                                        {
                                            <BSCol>
                                                <BSInputCheckbox TValue="bool" @bind-Value="Sheet.Rooms[room][bi]">
                                                </BSInputCheckbox>
                                            </BSCol>
                                        }
                                    </BSRow>
                                }
                            </BSRow>

                            <BSRow Justify="Justify.Center">
                                <div><strong>Weapons</strong></div>

                                @foreach (var (weapons, guesses) in Sheet.Weapons)
                                {
                                    <BSRow Justify="Justify.Center">
                                        <BSCol>@weapons</BSCol>
                                        @foreach (var bi in Enumerable.Range(0, guesses.Count))
                                        {
                                            <BSCol>
                                                <BSInputCheckbox TValue="bool" @bind-Value="Sheet.Weapons[weapons][bi]">
                                                </BSInputCheckbox>
                                            </BSCol>
                                        }
                                    </BSRow>
                                }
                            </BSRow>

                        </Content>
                    </BSAccordionItem>
                </BSAccordion>
            </BSCol>
        </BSRow>

    </div>

</div>

<BSModal DataId="M1" @ref="M1" IsCentered="true" Size="Size.Large">
    <Header>Someone Made a Suggestion</Header>
    <Content>

        @if (IsPlayerConfirmingSuggestion && SuggestionConfirmationCards.Count != 0)
        {
            <p>Select A Card from your hand to disprove their suggestion.</p>
            <BSRow Justify="Justify.Center">
                
                @foreach(var card in SuggestionConfirmationCards)
                {
                    <div style="max-width:150px">
                        <BSInputRadio TValue="Card" CheckedValue="@(card)" @bind-Value="SelectedDisproveCard" IsToggle="true" Color="BSColor.Primary" >
                            <BSImage id="card" Source=@card.GetCardImage() width=100 />
                        </BSInputRadio>
                    </div>

                }
            </BSRow>
        } else {
            <p>Sorry, you can't disprove this...</p>
        }
    
    </Content>
    <Footer Context="modal">
        @if (IsPlayerConfirmingSuggestion && SuggestionConfirmationCards.Count != 0)
        {
            <BSButton Color="BSColor.Primary" @onclick="SubmitDisproveSuggestion" disabled="@(SelectedDisproveCard is null)" >Disprove</BSButton>
        } else {
            <BSButton MarginStart="Margins.Auto" Color="BSColor.Secondary" @onclick="modal.HideAsync">Close Without Disprove</BSButton>
        }
        
    </Footer>
</BSModal>


<BSModal DataId="M2" @ref="M2" IsCentered="true" Size="Size.Large">
    <Header>Game Over!</Header>
    <Content>
        <BSRow Justify="Justify.Center">
            <div>Solution</div>
            @foreach (var card in State.Solution)
            {
                <div style="max-width:150px">
                    <BSImage id="card" Source=@card.GetCardImage() width=100 />
                </div>
            }
        </BSRow>
        <BSRow>
            <BSCol>
                Winner is @State.Winner.Character
            </BSCol>
        </BSRow>
        <BSRow Justify="Justify.Center">
            <Blafettis @ref="blafettis" />d
        </BSRow>
            
    </Content>
    <Footer Context="modal">
        <BSButton Color="BSColor.Success" IsOutlined="true" @onclick="RaiseConfetti">Party!</BSButton>
        <BSButton Color="BSColor.Primary" @onclick="TerminateGame">Return to home</BSButton>
    </Footer>
</BSModal>



