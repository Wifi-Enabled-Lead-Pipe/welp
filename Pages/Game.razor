@page "/game"


<PageTitle>Welp-Admin</PageTitle>
<div class="row">
    <div class="col">
        <img class="game-board" src="images/game-board-2.png" alt="..." />
        <div>
            <div class="room x-2 y2">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (-2, 2)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
            <div class="room x-1 y2">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (-1, 2)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
            <div class="room x0 y2">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (0, 2)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
            <div class="room x1 y2">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (1, 2)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
            <div class="room x2 y2">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (2, 2)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
        </div>

        <div>
            <div class="room x-2 y1">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (-2, 1)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
            <div class="room x-1 y1">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (-1, 1)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
            <div class="room x0 y1">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (0, 1)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
            <div class="room x1 y1">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (1, 1)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
            <div class="room x2 y1">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (2, 1)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
        </div>

        <div>
            <div class="room x-2 y0">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (-2, 0)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
            <div class="room x-1 y0">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (-1, 0)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
            <div class="room x0 y0">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (0, 0)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
            <div class="room x1 y0">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (1, 0)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
            <div class="room x2 y0">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (2, 0)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
        </div>

        <div>
            <div class="room x-2 y-1">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (-2, -1)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
            <div class="room x-1 y-1">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (-1, -1)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
            <div class="room x0 y-1">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (0, -1)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
            <div class="room x1 y-1">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (1, -1)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
            <div class="room x2 y-1">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (2, -1)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
        </div>

        <div>
            <div class="room x-2 y-2">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (-2, -2)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
            <div class="room x-1 y-2">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (-1, -2)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
            <div class="room x0 y-2">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (0, -2)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
            <div class="room x1 y-2">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (1, -2)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
            <div class="room x2 y-2">
                <BSRow Justify="Justify.Center">
                    @foreach (var player in State.Players.Where(p => p.Position == (2, -2)))
                    {
                        <div class="piece" id="@("character-"+player.Character.ToString())"></div>
                    }
                </BSRow>
            </div>
        </div>

    </div>
    <div class="col">
        <BSRow>
            <BSCol>
                <BSAccordion class="pt-5 pe-5">
                    @if (IAmScarlett)
                    {
                        <BSAccordionItem>
                            <Header>
                                <strong>
                                    Host Actions
                                </strong>
                            </Header>
                            <Content>
                                <BSRow Justify="Justify.Center">
                                    <p class="lead">
                                        You are the host, would you like to start/reset the game?
                                    </p>
                                    <button @onclick="RestartGame" type="button" class="btn btn-success massive-button"
                                            style="width: 300px">
                                        Start
                                    </button>
                                    <button @onclick="RestartGame" type="button" class="btn btn-warning massive-button ms-2"
                                            style="width: 300px">
                                        Restart
                                    </button>
                                </BSRow>
                            </Content>
                        </BSAccordionItem>
                    }
                    <BSAccordionItem DefaultShown=IsPlayerTurn OnShow=GetActionOptions>
                        <Header>
                            <strong>
                                Player Actions
                            </strong>
                        </Header>
                        <Content>
                            @if (!IsPlayerTurn || CurrentOptions.EndTurn == null)
                            {
                                <BSRow Justify="Justify.Center">
                                    <p class="lead">
                                        Please wait for your turn.
                                    </p>
                                </BSRow>
                            }
                            else
                            {
                                <BSRow Justify="Justify.Center">
                                    <p class="lead">
                                        Please select an action.
                                    </p>
                                    @if(CurrentOptions.Suggestion != null)
                                    {
                                        var actionRecord = new ServerData.ActionRecord() { ActionType = CurrentOptions.Accusation.ActionType, ActionDetails = new Dictionary<string, string>(), Player = State.CurrentPlayer }; ;

                                        <BSInputRadio CheckedValue="@actionRecord" @bind-Value="ActionRecord" IsToggle="true" Color="BlazorStrap.BSColor.Primary" IsOutlined="true">
                                            Suggestion
                                        </BSInputRadio>
                                        <BSInput InputType="BlazorStrap.InputType.Select" @bind-Value="@actionRecord.ActionDetails["suspect"]">
                                            @foreach (var (suspect, guesses) in Sheet.Suspects)
                                            {
                                                <option>@suspect</option>
                                            }
                                        </BSInput>
                                        <BSInput InputType="BlazorStrap.InputType.Select" @bind-Value="@actionRecord.ActionDetails["weapon"]">
                                            @foreach (var (weapon, guesses) in Sheet.Weapons)
                                            {
                                                <option>@weapon</option>
                                            }
                                        </BSInput>
                                    }
                                    @if(CurrentOptions.Accusation != null)
                                    {
                                        var actionRecord = new ServerData.ActionRecord() { ActionType = CurrentOptions.Accusation.ActionType, ActionDetails = new Dictionary<string, string>(), Player = State.CurrentPlayer }; ;
                                        <BSInputRadio CheckedValue="@actionRecord" @bind-Value="ActionRecord" IsToggle="true" Color="BlazorStrap.BSColor.Primary" IsOutlined="true">
                                            Accusation
                                        </BSInputRadio>
                                        <BSInput InputType="BlazorStrap.InputType.Select" @bind-Value="@actionRecord.ActionDetails" >
                                            @foreach (var (suspect, guesses) in Sheet.Suspects)
                                            {
                                                <option>@suspect</option>
                                            }
                                        </BSInput>
                                        <BSInput InputType="BlazorStrap.InputType.Select" @bind-Value="@actionRecord.ActionDetails">
                                            @foreach (var (weapon, guesses) in Sheet.Weapons)
                                            {
                                                <option>@weapon</option>
                                            }
                                        </BSInput>
                                        <BSInput InputType="BlazorStrap.InputType.Select" @bind-Value="@actionRecord.ActionDetails">
                                            @foreach (var (room, guesses) in Sheet.Rooms)
                                            {
                                                <option>@room</option>
                                            }
                                        </BSInput>
                                    }
                                    @if(CurrentOptions.Movement != null)
                                    {
                                        @foreach (var movement in CurrentOptions.Movement)
                                        {
                                            <BSInputRadio CheckedValue="@(new ServerData.ActionRecord(){ ActionType = movement.ActionType, ActionDetails = new Dictionary<string, string>{{"Position", $"{movement.Details.NewPosition.x},{movement.Details.NewPosition.y}"}}, Player = State.CurrentPlayer})" @bind-Value="ActionRecord" IsToggle="true" Color="BlazorStrap.BSColor.Primary" IsOutlined="true">
                                                Move to new position: @movement.Details.NewPosition
                                            </BSInputRadio>
                                        }
                                    }
                                    <BSInputRadio CheckedValue="@(new ServerData.ActionRecord(){ ActionType = CurrentOptions.EndTurn.ActionType, Player = State.CurrentPlayer})" @bind-Value="ActionRecord" IsToggle="true" Color="BlazorStrap.BSColor.Primary" IsOutlined="true">
                                        EndTurn
                                    </BSInputRadio>
                                    <button @onclick="SubmitPlayerAction" type="button" class="btn massive-button"
                                            style="width: 300px">
                                        Send
                                        Selected Action
                                    </button>
                                </BSRow>
                            }
                        </Content>
                    </BSAccordionItem>
                    <BSAccordionItem>
                        <Header><strong>Guess Sheet</strong></Header>
                        <Content>
                            <BSRow Justify="Justify.Center">
                                <div><strong>Suspects</strong></div>

                                @foreach (var (suspect, guesses) in Sheet.Suspects)
                                {
                                    <BSRow Justify="Justify.Center">
                                        <BSCol>@suspect</BSCol>
                                        @foreach (var bi in Enumerable.Range(0, guesses.Count))
                                        {
                                            <BSCol>
                                                <BSInputCheckbox TValue="bool" @bind-Value="Sheet.Suspects[suspect][bi]"></BSInputCheckbox>
                                            </BSCol>
                                        }
                                    </BSRow>
                                }
                            </BSRow>

                            <BSRow Justify="Justify.Center">
                                <div><strong>Rooms</strong></div>

                                @foreach (var (room, guesses) in Sheet.Rooms)
                                {
                                    <BSRow Justify="Justify.Center">
                                        <BSCol>@room</BSCol>
                                        @foreach (var bi in Enumerable.Range(0, guesses.Count))
                                        {
                                            <BSCol>
                                                <BSInputCheckbox TValue="bool" @bind-Value="Sheet.Rooms[room][bi]"></BSInputCheckbox>
                                            </BSCol>
                                        }
                                    </BSRow>
                                }
                            </BSRow>

                            <BSRow Justify="Justify.Center">
                                <div><strong>Weapons</strong></div>

                                @foreach (var (weapons, guesses) in Sheet.Weapons)
                                {
                                    <BSRow Justify="Justify.Center">
                                        <BSCol>@weapons</BSCol>
                                        @foreach (var bi in Enumerable.Range(0, guesses.Count))
                                        {
                                            <BSCol>
                                                <BSInputCheckbox TValue="bool" @bind-Value="Sheet.Weapons[weapons][bi]"></BSInputCheckbox>
                                            </BSCol>
                                        }
                                    </BSRow>
                                }
                            </BSRow>

                        </Content>
                    </BSAccordionItem>

                </BSAccordion>
            </BSCol>
        </BSRow>
    </div>
</div>